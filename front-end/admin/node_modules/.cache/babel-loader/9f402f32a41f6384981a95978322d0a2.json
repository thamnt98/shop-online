{"ast":null,"code":"import _classCallCheck from \"/Users/thamnt/Downloads/shop-online/front-end/admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thamnt/Downloads/shop-online/front-end/admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/thamnt/Downloads/shop-online/front-end/admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/thamnt/Downloads/shop-online/front-end/admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thamnt/Downloads/shop-online/front-end/admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/thamnt/Downloads/shop-online/front-end/admin/src/containers/Sidebar/index.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Drawer, Layout } from \"antd\";\nimport SidebarContent from \"./SidebarContent\";\nimport { toggleCollapsedSideNav, updateWindowWidth } from \"appRedux/actions/Setting\";\nimport { NAV_STYLE_DRAWER, NAV_STYLE_FIXED, NAV_STYLE_MINI_SIDEBAR, NAV_STYLE_NO_HEADER_EXPANDED_SIDEBAR, NAV_STYLE_NO_HEADER_MINI_SIDEBAR, TAB_SIZE, THEME_TYPE_LITE } from \"../../constants/ThemeSetting\";\nvar Sider = Layout.Sider;\nexport var Sidebar =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Sidebar, _Component);\n\n  function Sidebar() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Sidebar);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Sidebar)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.onToggleCollapsedNav = function () {\n      _this.props.toggleCollapsedSideNav(!_this.props.navCollapsed);\n    };\n\n    return _this;\n  }\n\n  _createClass(Sidebar, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      window.addEventListener('resize', function () {\n        _this2.props.updateWindowWidth(window.innerWidth);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          themeType = _this$props.themeType,\n          navCollapsed = _this$props.navCollapsed,\n          width = _this$props.width,\n          navStyle = _this$props.navStyle;\n      var drawerStyle = \"gx-collapsed-sidebar\";\n\n      if (navStyle === NAV_STYLE_FIXED) {\n        drawerStyle = \"\";\n      } else if (navStyle === NAV_STYLE_NO_HEADER_MINI_SIDEBAR) {\n        drawerStyle = \"gx-mini-sidebar gx-mini-custom-sidebar\";\n      } else if (navStyle === NAV_STYLE_NO_HEADER_EXPANDED_SIDEBAR) {\n        drawerStyle = \"gx-custom-sidebar\";\n      } else if (navStyle === NAV_STYLE_MINI_SIDEBAR) {\n        drawerStyle = \"gx-mini-sidebar\";\n      } else if (navStyle === NAV_STYLE_DRAWER) {\n        drawerStyle = \"gx-collapsed-sidebar\";\n      }\n\n      if ((navStyle === NAV_STYLE_FIXED || navStyle === NAV_STYLE_MINI_SIDEBAR || navStyle === NAV_STYLE_NO_HEADER_EXPANDED_SIDEBAR) && width < TAB_SIZE) {\n        drawerStyle = \"gx-collapsed-sidebar\";\n      }\n\n      return React.createElement(Sider, {\n        className: \"gx-app-sidebar \".concat(drawerStyle, \" \").concat(themeType !== THEME_TYPE_LITE ? 'gx-layout-sider-dark' : null),\n        trigger: null,\n        collapsed: width < TAB_SIZE ? false : navStyle === NAV_STYLE_MINI_SIDEBAR || navStyle === NAV_STYLE_NO_HEADER_MINI_SIDEBAR,\n        theme: themeType === THEME_TYPE_LITE ? \"lite\" : \"dark\",\n        collapsible: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, navStyle === NAV_STYLE_DRAWER || width < TAB_SIZE ? React.createElement(Drawer, {\n        wrapClassName: \"gx-drawer-sidebar \".concat(themeType !== THEME_TYPE_LITE ? 'gx-drawer-sidebar-dark' : null),\n        placement: \"left\",\n        closable: false,\n        onClose: this.onToggleCollapsedNav.bind(this),\n        visible: navCollapsed,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(SidebarContent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      })) : React.createElement(SidebarContent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Sidebar;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(_ref) {\n  var settings = _ref.settings;\n  var themeType = settings.themeType,\n      navStyle = settings.navStyle,\n      navCollapsed = settings.navCollapsed,\n      width = settings.width,\n      locale = settings.locale;\n  return {\n    themeType: themeType,\n    navStyle: navStyle,\n    navCollapsed: navCollapsed,\n    width: width,\n    locale: locale\n  };\n};\n\nexport default connect(mapStateToProps, {\n  toggleCollapsedSideNav: toggleCollapsedSideNav,\n  updateWindowWidth: updateWindowWidth\n})(Sidebar);","map":{"version":3,"sources":["/Users/thamnt/Downloads/shop-online/front-end/admin/src/containers/Sidebar/index.js"],"names":["React","Component","connect","Drawer","Layout","SidebarContent","toggleCollapsedSideNav","updateWindowWidth","NAV_STYLE_DRAWER","NAV_STYLE_FIXED","NAV_STYLE_MINI_SIDEBAR","NAV_STYLE_NO_HEADER_EXPANDED_SIDEBAR","NAV_STYLE_NO_HEADER_MINI_SIDEBAR","TAB_SIZE","THEME_TYPE_LITE","Sider","Sidebar","onToggleCollapsedNav","props","navCollapsed","window","addEventListener","innerWidth","themeType","width","navStyle","drawerStyle","bind","mapStateToProps","settings","locale"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {Drawer, Layout} from \"antd\";\r\n\r\nimport SidebarContent from \"./SidebarContent\";\r\nimport {toggleCollapsedSideNav, updateWindowWidth} from \"appRedux/actions/Setting\";\r\nimport {\r\n  NAV_STYLE_DRAWER,\r\n  NAV_STYLE_FIXED,\r\n  NAV_STYLE_MINI_SIDEBAR,\r\n  NAV_STYLE_NO_HEADER_EXPANDED_SIDEBAR,\r\n  NAV_STYLE_NO_HEADER_MINI_SIDEBAR,\r\n  TAB_SIZE,\r\n  THEME_TYPE_LITE\r\n} from \"../../constants/ThemeSetting\";\r\n\r\nconst {Sider} = Layout;\r\n\r\nexport class Sidebar extends Component {\r\n\r\n  onToggleCollapsedNav = () => {\r\n    this.props.toggleCollapsedSideNav(!this.props.navCollapsed);\r\n  };\r\n\r\n  componentDidMount() {\r\n    window.addEventListener('resize', () => {\r\n      this.props.updateWindowWidth(window.innerWidth)\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {themeType, navCollapsed, width, navStyle} = this.props;\r\n\r\n    let drawerStyle = \"gx-collapsed-sidebar\";\r\n\r\n    if (navStyle === NAV_STYLE_FIXED) {\r\n      drawerStyle = \"\";\r\n    } else if (navStyle === NAV_STYLE_NO_HEADER_MINI_SIDEBAR) {\r\n      drawerStyle = \"gx-mini-sidebar gx-mini-custom-sidebar\";\r\n    } else if (navStyle === NAV_STYLE_NO_HEADER_EXPANDED_SIDEBAR) {\r\n      drawerStyle = \"gx-custom-sidebar\"\r\n    } else if (navStyle === NAV_STYLE_MINI_SIDEBAR) {\r\n      drawerStyle = \"gx-mini-sidebar\";\r\n    } else if (navStyle === NAV_STYLE_DRAWER) {\r\n      drawerStyle = \"gx-collapsed-sidebar\"\r\n    }\r\n    if ((navStyle === NAV_STYLE_FIXED || navStyle === NAV_STYLE_MINI_SIDEBAR\r\n        || navStyle === NAV_STYLE_NO_HEADER_EXPANDED_SIDEBAR) && width < TAB_SIZE) {\r\n      drawerStyle = \"gx-collapsed-sidebar\"\r\n    }\r\n    return (\r\n      <Sider\r\n        className={`gx-app-sidebar ${drawerStyle} ${themeType !== THEME_TYPE_LITE ? 'gx-layout-sider-dark' : null}`}\r\n        trigger={null}\r\n        collapsed={(width < TAB_SIZE ? false : navStyle === NAV_STYLE_MINI_SIDEBAR || navStyle === NAV_STYLE_NO_HEADER_MINI_SIDEBAR)}\r\n        theme={themeType === THEME_TYPE_LITE ? \"lite\" : \"dark\"}\r\n        collapsible>\r\n        {\r\n          navStyle === NAV_STYLE_DRAWER || width < TAB_SIZE ?\r\n            <Drawer\r\n              wrapClassName={`gx-drawer-sidebar ${themeType !== THEME_TYPE_LITE ? 'gx-drawer-sidebar-dark' : null}`}\r\n              placement=\"left\"\r\n              closable={false}\r\n              onClose={this.onToggleCollapsedNav.bind(this)}\r\n              visible={navCollapsed}>\r\n              <SidebarContent/>\r\n            </Drawer> :\r\n            <SidebarContent/>\r\n        }\r\n      </Sider>)\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({settings}) => {\r\n  const {themeType, navStyle, navCollapsed, width, locale} = settings;\r\n  return {themeType, navStyle, navCollapsed, width, locale}\r\n};\r\nexport default connect(mapStateToProps, {toggleCollapsedSideNav, updateWindowWidth})(Sidebar);\r\n"]},"metadata":{},"sourceType":"module"}